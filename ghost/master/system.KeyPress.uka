




// キー入力関係



// reference0 : 入力キー
OnKeyPress {
    _text = ""
    _KEY = reference[0]

//{{{
    // デバッグ機能-------------------------------------------------
    if ( OldKeyPress == "back" && userName == "アンバー" ) {
        //reload
        if ( _KEY == "r" ) {
            _text = '\1\s[100000]\0\ \![reload,shiori]\0\s[0]\_qReloaded.\_q\e'

        //folder open
        } elseif ( _KEY == "o" ) {
            _text = "\0\j[file:///%( GHOSTPATH )]開くよ～\e"

        //create update file
        } elseif ( _KEY == "u" ) {
            _text = "更新ファイルを作成\![execute,createupdatedata]\e"

        // 各種変数の状態確認。
        } elseif ( _KEY == "s" ) {
            _text = InputKey.Status()

        // shellのチートシート
        } elseif ( _KEY == "c" ) {
            _text = "\0\j[file:///%( GHOSTPATH )../../shell/master/CheatSheet.png]開くよ～\e"


        }
//}}}
//{{{
    // [a-z] ショートカット機能-------------------------------------
    } elseif ( OldKeyPress == "space" ) {

        if RE_MATCH(_KEY, '[a-z]' ) {
            _text = InputKey.CallShortCut( _KEY )
        //} elseif ( _KEY == "back" ) {
        }
    }
//}}}
//{{{
    // [0-9] タイマー機能-------------------------------------------
    if ( _KEY == "0" || _KEY == "1" || _KEY == "2" || _KEY == "3" || _KEY == "4" || _KEY == "5" || _KEY == "6" || _KEY == "7" || _KEY == "8" || _KEY == "9" ) {
        _text = InputKey.Timer( _KEY )
    } elseif ( _KEY == "escape" ) {
        _text = InputKey.TimerExit()
    }
//}}}

    OldKeyPress = _KEY
    _text
}

//{{{
// Status. : 各種状態確認用関数を実装する。-------------------------
// 専用メニューのある機能はここで確認しなくてよい。
InputKey.Status {
    StatusList    = GETFUNCLIST( "Status." )
    _text = "【各種ステータス】\n\n"
    for _i = 0 ; _i < ARRAYSIZE( StatusList ) ; _i++ {
        _status = EVAL(StatusList[_i])
        if ( _text != "") {
            _text = _text + _status + "\n"
        }
    }
    _text
}
//}}}



