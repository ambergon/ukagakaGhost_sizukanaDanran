






// 表情や状態を管理する関数。


//{{{
// 表情テスト-------------------------------------------------------
// / 赤面 / 汗
Surface.Test {
    "\s[普通]"
//{{{
    // A カラム-----------------------------------------------------
    "\s[不満]"
    "\s[にへら]"
    "\s[怒り]"
    "\s[目閉じ]"
    "\s[笑顔]"
    "\s[脱力]"
    "\s[困る]"
    "\s[驚き]"
//}}}
//{{{
    // B カラム-----------------------------------------------------
    "\s[あはは]"
    "\s[怒ったぞ]"
    "\s[やだー]"
    //None]
    "\s[微笑]"
    "\s[疑い]"
    "\s[不安]"
    "\s[どうかな]"
    "\s[うーん]"
//}}}
//{{{
    // C カラム-----------------------------------------------------
    "\s[嫌!]"
    "\s[しょうがないなー]"
    //None]
    "\s[困ったなー]"
    "\s[困ったなーA]"
    "\s[退屈]"
    "\s[どうしよっかなー]"
    "\s[否定]"
    "\s[じとー]"
//}}}
//{{{
    // D カラム-----------------------------------------------------
    "\s[半目]"
    //None]
    "\s[上機嫌]"
    "\s[ニカッ]"
    //None]"
    //None]"
    //None]"
    "\s[泣き始め]"
    "\s[うわっ]"
//}}}
}
//}}}




//{{{
// 起動処理---------------------------------------------------------
AutoLoad.system_Surfece {
    // 初期表情
    // ゴーストの状態を表す。
    Surface.TalkMode = "MODE_TalkingYou"

    // 状態継続秒数の初期値
    Surface.Sec = 20
    // アクションごとに追加する秒数。
    Surface.AddSec = 10
    //状態が維持される最大秒数
    Surface.MaxSec = 120 
    //Surface.MaxSec = 180 

    // 各種 GearUp 連動関数
    // GearUpFunction では発言できない。
    // 呼ばれるタイミングで既にギアが上がっている。
    GearUpFunction = GETFUNCLIST( "GearUp." )
    // 各種 GearDown 連動関数
    // 呼ばれるタイミングで既にギアが下がっている。
    // 発言してはならない。
    GearDownFunction = GETFUNCLIST( "GearDown." )
}
//}}}
//{{{
// 終了処理---------------------------------------------------------
AutoUnload.system_Surfece {
    ERASEVAR( 'Surface.TalkMode' )
    ERASEVAR( 'Surface.Sec' )
    ERASEVAR( 'Surface.AddSec' )
    ERASEVAR( 'Surface.MaxSec' )

    ERASEVAR( 'GearUpFunction' )
    ERASEVAR( 'GearDownFunction' )
}
//}}}
//{{{
// トーク等で発生した表情の変化を戻す関数。-------------------------
//defaultで発言から15秒後表情を戻す
//が、バルーンと一緒に消えるのは気に食わないのでずらす。
//これは自分で使っている状態を戻すコードとは分離しているので、遅延の長さは致命的にならないはずだ。
OnSurfaceRestore {
    "\0\b[-1]\__w[2000]\s[%(fc)]\e"
}
//}}}
//{{{
// 刺激に対して     : 1段階ギアを上げる。---------------------------
// 発言より先に読んでおくこと。
Surface.GearUp {

    // 顔を上げる。
    if Surface.TalkMode == "MODE_ReadingBook" || Surface.TalkMode == "MODE_ReturnBookOpen" {
        Surface.TalkMode = "MODE_FaceUp"
        for _i = 0 ; _i < ARRAYSIZE( GearUpFunction ) ; _i++ {
            EVAL( GearUpFunction[_i] )
        }

    // 本を閉じる。
    } elseif Surface.TalkMode == "MODE_FaceUp" {
        Surface.TalkMode = "MODE_CloseBook"
        for _i = 0 ; _i < ARRAYSIZE( GearUpFunction ) ; _i++ {
            EVAL( GearUpFunction[_i] )
        }

    // 話を聞く
    } elseif Surface.TalkMode == "MODE_CloseBook" {
        Surface.TalkMode = "MODE_TalkingYou"
        for _i = 0 ; _i < ARRAYSIZE( GearUpFunction ) ; _i++ {
            EVAL( GearUpFunction[_i] )
        }

    // 最高レベル。維持
    } elseif Surface.TalkMode == "MODE_TalkingYou" {
    }

    // 現在の状態が継続される秒数を追加。
    Surface.Sec = Surface.Sec + Surface.AddSec
    if ( Surface.Sec > Surface.MaxSec ) {
        Surface.Sec = Surface.MaxSec
    }
}
//}}}
//{{{
// 時間経過によって : 1段階をギアを落とす。-------------------------
// これには発言(空送信)が発生する。
CheckSecond.GearDown {

    // 状態継続秒数。0になると各種発火。
    if ( 0 < Surface.Sec ) {
        Surface.Sec = Surface.Sec - 1
    }

    // 読書継続
    if ( Surface.TalkMode == "MODE_ReadingBook" ) {


    // 本を開いて読み始める
    } elseif ( Surface.Sec == 0 && Surface.TalkMode == "MODE_ReturnBookOpen" ) {
        Surface.TalkMode = "MODE_ReadingBook"
        Surface.Sec = 3
        "\0\s[%(fc)]\b[-1]"

        for _i = 0 ; _i < ARRAYSIZE( GearDownFunction ) ; _i++ {
            EVAL( GearDownFunction[_i] )
        }


    // 本に視線を戻す。
    }elseif ( Surface.Sec == 0  && Surface.TalkMode == "MODE_FaceUp" ) {
        Surface.TalkMode = "MODE_ReadingBook"
        "\0\s[%(fc)]\b[-1]"

        for _i = 0 ; _i < ARRAYSIZE( GearDownFunction ) ; _i++ {
            EVAL( GearDownFunction[_i] )
        }


    // 読書状態へ戻る
    }elseif ( Surface.Sec == 0  && Surface.TalkMode == "MODE_TalkingYou" ) || ( Surface.Sec == 0 && Surface.TalkMode == "MODE_CloseBook" ) {
        Surface.TalkMode = "MODE_ReturnBookOpen"
        Surface.Sec = 3
        "\0\s[%(fc)]\b[-1]"

        for _i = 0 ; _i < ARRAYSIZE( GearDownFunction ) ; _i++ {
            EVAL( GearDownFunction[_i] )
        }
    }
}
//}}}
//{{{
// 現在のギアに応じてSurface番号を出力してくれる関数。--------------
// 第一引数 : surfaceに対応する表情名
// FaceControl
fc {
    // 現在の状態のsurfaceの出力
    _status = 000
    _face = _argv[0]

	if ( Surface.TalkMode == "MODE_ReadingBook" ) {
		_status = 000

	} elseif ( Surface.TalkMode == "MODE_FaceUp" ) {
		_status = 100

	} elseif ( Surface.TalkMode == "MODE_CloseBook" ) {
		_status = 200

	} elseif ( Surface.TalkMode == "MODE_TalkingYou" ) {
		_status = 300
        //_status = _status + _face

	} elseif ( Surface.TalkMode == "MODE_ReturnBookOpen" ) {
		_status = 400
	}

    _status
}
//}}}

//{{{
// ステータス関数---------------------------------------------------
Status.Surface {
    "SurfaceMode = %(Surface.TalkMode)"
}
//}}}






























